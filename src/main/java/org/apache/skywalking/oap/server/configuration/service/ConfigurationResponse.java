// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configuration-service.proto

package org.apache.skywalking.oap.server.configuration.service;

/**
 * Protobuf type {@code ConfigurationResponse}
 */
public final class ConfigurationResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:ConfigurationResponse)
    ConfigurationResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ConfigurationResponse.newBuilder() to construct.
  private ConfigurationResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ConfigurationResponse() {
    configTable_ = java.util.Collections.emptyList();
    uuid_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new ConfigurationResponse();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ConfigurationResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              configTable_ = new java.util.ArrayList<Config>();
              mutable_bitField0_ |= 0x00000001;
            }
            configTable_.add(
                input.readMessage(Config.parser(), extensionRegistry));
            break;
          }
          case 18: {
            String s = input.readStringRequireUtf8();

            uuid_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        configTable_ = java.util.Collections.unmodifiableList(configTable_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ConfigurationServiceOuterClass.internal_static_ConfigurationResponse_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ConfigurationServiceOuterClass.internal_static_ConfigurationResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ConfigurationResponse.class, Builder.class);
  }

  public static final int CONFIGTABLE_FIELD_NUMBER = 1;
  private java.util.List<Config> configTable_;
  /**
   * <pre>
   * Include all config items.
   * All config name should be not empty,
   * the name is composed by "module name"."provider name"."item name".
   * Each watcher implementor provides this, and it will be notified when the value changed.
   * If the config center wants to set the value to NULL or empty,
   * must set the name with empty value explicitly.
   * </pre>
   *
   * <code>repeated .Config configTable = 1;</code>
   */
  @Override
  public java.util.List<Config> getConfigTableList() {
    return configTable_;
  }
  /**
   * <pre>
   * Include all config items.
   * All config name should be not empty,
   * the name is composed by "module name"."provider name"."item name".
   * Each watcher implementor provides this, and it will be notified when the value changed.
   * If the config center wants to set the value to NULL or empty,
   * must set the name with empty value explicitly.
   * </pre>
   *
   * <code>repeated .Config configTable = 1;</code>
   */
  @Override
  public java.util.List<? extends ConfigOrBuilder>
      getConfigTableOrBuilderList() {
    return configTable_;
  }
  /**
   * <pre>
   * Include all config items.
   * All config name should be not empty,
   * the name is composed by "module name"."provider name"."item name".
   * Each watcher implementor provides this, and it will be notified when the value changed.
   * If the config center wants to set the value to NULL or empty,
   * must set the name with empty value explicitly.
   * </pre>
   *
   * <code>repeated .Config configTable = 1;</code>
   */
  @Override
  public int getConfigTableCount() {
    return configTable_.size();
  }
  /**
   * <pre>
   * Include all config items.
   * All config name should be not empty,
   * the name is composed by "module name"."provider name"."item name".
   * Each watcher implementor provides this, and it will be notified when the value changed.
   * If the config center wants to set the value to NULL or empty,
   * must set the name with empty value explicitly.
   * </pre>
   *
   * <code>repeated .Config configTable = 1;</code>
   */
  @Override
  public Config getConfigTable(int index) {
    return configTable_.get(index);
  }
  /**
   * <pre>
   * Include all config items.
   * All config name should be not empty,
   * the name is composed by "module name"."provider name"."item name".
   * Each watcher implementor provides this, and it will be notified when the value changed.
   * If the config center wants to set the value to NULL or empty,
   * must set the name with empty value explicitly.
   * </pre>
   *
   * <code>repeated .Config configTable = 1;</code>
   */
  @Override
  public ConfigOrBuilder getConfigTableOrBuilder(
      int index) {
    return configTable_.get(index);
  }

  public static final int UUID_FIELD_NUMBER = 2;
  private volatile Object uuid_;
  /**
   * <pre>
   * UUID is literal string represents the content of the config table.
   * If config table is unchanged, then could response the same uuid, and config table is not required.
   * </pre>
   *
   * <code>string uuid = 2;</code>
   * @return The uuid.
   */
  @Override
  public String getUuid() {
    Object ref = uuid_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      uuid_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * UUID is literal string represents the content of the config table.
   * If config table is unchanged, then could response the same uuid, and config table is not required.
   * </pre>
   *
   * <code>string uuid = 2;</code>
   * @return The bytes for uuid.
   */
  @Override
  public com.google.protobuf.ByteString
      getUuidBytes() {
    Object ref = uuid_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      uuid_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) {
      return true;
    }
    if (isInitialized == 0) {
      return false;
    }

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < configTable_.size(); i++) {
      output.writeMessage(1, configTable_.get(i));
    }
    if (!getUuidBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, uuid_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) {
      return size;
    }

    size = 0;
    for (int i = 0; i < configTable_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, configTable_.get(i));
    }
    if (!getUuidBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, uuid_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ConfigurationResponse)) {
      return super.equals(obj);
    }
    ConfigurationResponse other = (ConfigurationResponse) obj;

    if (!getConfigTableList()
        .equals(other.getConfigTableList())) {
      return false;
    }
    if (!getUuid()
        .equals(other.getUuid())) {
      return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getConfigTableCount() > 0) {
      hash = (37 * hash) + CONFIGTABLE_FIELD_NUMBER;
      hash = (53 * hash) + getConfigTableList().hashCode();
    }
    hash = (37 * hash) + UUID_FIELD_NUMBER;
    hash = (53 * hash) + getUuid().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ConfigurationResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ConfigurationResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ConfigurationResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ConfigurationResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ConfigurationResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ConfigurationResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ConfigurationResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ConfigurationResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static ConfigurationResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static ConfigurationResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ConfigurationResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ConfigurationResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ConfigurationResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code ConfigurationResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ConfigurationResponse)
      ConfigurationResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ConfigurationServiceOuterClass.internal_static_ConfigurationResponse_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ConfigurationServiceOuterClass.internal_static_ConfigurationResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ConfigurationResponse.class, Builder.class);
    }

    // Construct using org.apache.skywalking.oap.server.configuration.service.ConfigurationResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getConfigTableFieldBuilder();
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      if (configTableBuilder_ == null) {
        configTable_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        configTableBuilder_.clear();
      }
      uuid_ = "";

      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ConfigurationServiceOuterClass.internal_static_ConfigurationResponse_descriptor;
    }

    @Override
    public ConfigurationResponse getDefaultInstanceForType() {
      return ConfigurationResponse.getDefaultInstance();
    }

    @Override
    public ConfigurationResponse build() {
      ConfigurationResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public ConfigurationResponse buildPartial() {
      ConfigurationResponse result = new ConfigurationResponse(this);
      int from_bitField0_ = bitField0_;
      if (configTableBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          configTable_ = java.util.Collections.unmodifiableList(configTable_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.configTable_ = configTable_;
      } else {
        result.configTable_ = configTableBuilder_.build();
      }
      result.uuid_ = uuid_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ConfigurationResponse) {
        return mergeFrom((ConfigurationResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ConfigurationResponse other) {
      if (other == ConfigurationResponse.getDefaultInstance()) {
        return this;
      }
      if (configTableBuilder_ == null) {
        if (!other.configTable_.isEmpty()) {
          if (configTable_.isEmpty()) {
            configTable_ = other.configTable_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureConfigTableIsMutable();
            configTable_.addAll(other.configTable_);
          }
          onChanged();
        }
      } else {
        if (!other.configTable_.isEmpty()) {
          if (configTableBuilder_.isEmpty()) {
            configTableBuilder_.dispose();
            configTableBuilder_ = null;
            configTable_ = other.configTable_;
            bitField0_ = (bitField0_ & ~0x00000001);
            configTableBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getConfigTableFieldBuilder() : null;
          } else {
            configTableBuilder_.addAllMessages(other.configTable_);
          }
        }
      }
      if (!other.getUuid().isEmpty()) {
        uuid_ = other.uuid_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      ConfigurationResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (ConfigurationResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<Config> configTable_ =
      java.util.Collections.emptyList();
    private void ensureConfigTableIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        configTable_ = new java.util.ArrayList<Config>(configTable_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        Config, Config.Builder, ConfigOrBuilder> configTableBuilder_;

    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    @Override
    public java.util.List<Config> getConfigTableList() {
      if (configTableBuilder_ == null) {
        return java.util.Collections.unmodifiableList(configTable_);
      } else {
        return configTableBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    @Override
    public int getConfigTableCount() {
      if (configTableBuilder_ == null) {
        return configTable_.size();
      } else {
        return configTableBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    @Override
    public Config getConfigTable(int index) {
      if (configTableBuilder_ == null) {
        return configTable_.get(index);
      } else {
        return configTableBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    public Builder setConfigTable(
        int index, Config value) {
      if (configTableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConfigTableIsMutable();
        configTable_.add(index, value);
        onChanged();
      } else {
        configTableBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    public Builder setConfigTable(
        int index, Config.Builder builderForValue) {
      if (configTableBuilder_ == null) {
        ensureConfigTableIsMutable();
        configTable_.set(index, builderForValue.build());
        onChanged();
      } else {
        configTableBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    public Builder addConfigTable(Config value) {
      if (configTableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConfigTableIsMutable();
        configTable_.add(value);
        onChanged();
      } else {
        configTableBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    public Builder addConfigTable(
        int index, Config value) {
      if (configTableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConfigTableIsMutable();
        configTable_.add(index, value);
        onChanged();
      } else {
        configTableBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    public Builder addConfigTable(
        Config.Builder builderForValue) {
      if (configTableBuilder_ == null) {
        ensureConfigTableIsMutable();
        configTable_.add(builderForValue.build());
        onChanged();
      } else {
        configTableBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    public Builder addConfigTable(
        int index, Config.Builder builderForValue) {
      if (configTableBuilder_ == null) {
        ensureConfigTableIsMutable();
        configTable_.add(index, builderForValue.build());
        onChanged();
      } else {
        configTableBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    public Builder addAllConfigTable(
        Iterable<? extends Config> values) {
      if (configTableBuilder_ == null) {
        ensureConfigTableIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, configTable_);
        onChanged();
      } else {
        configTableBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    public Builder clearConfigTable() {
      if (configTableBuilder_ == null) {
        configTable_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        configTableBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    public Builder removeConfigTable(int index) {
      if (configTableBuilder_ == null) {
        ensureConfigTableIsMutable();
        configTable_.remove(index);
        onChanged();
      } else {
        configTableBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    public Config.Builder getConfigTableBuilder(
        int index) {
      return getConfigTableFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    @Override
    public ConfigOrBuilder getConfigTableOrBuilder(
        int index) {
      if (configTableBuilder_ == null) {
        return configTable_.get(index);  } else {
        return configTableBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    @Override
    public java.util.List<? extends ConfigOrBuilder>
         getConfigTableOrBuilderList() {
      if (configTableBuilder_ != null) {
        return configTableBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(configTable_);
      }
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    public Config.Builder addConfigTableBuilder() {
      return getConfigTableFieldBuilder().addBuilder(
          Config.getDefaultInstance());
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    public Config.Builder addConfigTableBuilder(
        int index) {
      return getConfigTableFieldBuilder().addBuilder(
          index, Config.getDefaultInstance());
    }
    /**
     * <pre>
     * Include all config items.
     * All config name should be not empty,
     * the name is composed by "module name"."provider name"."item name".
     * Each watcher implementor provides this, and it will be notified when the value changed.
     * If the config center wants to set the value to NULL or empty,
     * must set the name with empty value explicitly.
     * </pre>
     *
     * <code>repeated .Config configTable = 1;</code>
     */
    public java.util.List<Config.Builder>
         getConfigTableBuilderList() {
      return getConfigTableFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        Config, Config.Builder, ConfigOrBuilder>
        getConfigTableFieldBuilder() {
      if (configTableBuilder_ == null) {
        configTableBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            Config, Config.Builder, ConfigOrBuilder>(
                configTable_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        configTable_ = null;
      }
      return configTableBuilder_;
    }

    private Object uuid_ = "";
    /**
     * <pre>
     * UUID is literal string represents the content of the config table.
     * If config table is unchanged, then could response the same uuid, and config table is not required.
     * </pre>
     *
     * <code>string uuid = 2;</code>
     * @return The uuid.
     */
    @Override
    public String getUuid() {
      Object ref = uuid_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        uuid_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * UUID is literal string represents the content of the config table.
     * If config table is unchanged, then could response the same uuid, and config table is not required.
     * </pre>
     *
     * <code>string uuid = 2;</code>
     * @return The bytes for uuid.
     */
    @Override
    public com.google.protobuf.ByteString
        getUuidBytes() {
      Object ref = uuid_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        uuid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * UUID is literal string represents the content of the config table.
     * If config table is unchanged, then could response the same uuid, and config table is not required.
     * </pre>
     *
     * <code>string uuid = 2;</code>
     * @param value The uuid to set.
     * @return This builder for chaining.
     */
    public Builder setUuid(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      uuid_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * UUID is literal string represents the content of the config table.
     * If config table is unchanged, then could response the same uuid, and config table is not required.
     * </pre>
     *
     * <code>string uuid = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearUuid() {
      
      uuid_ = getDefaultInstance().getUuid();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * UUID is literal string represents the content of the config table.
     * If config table is unchanged, then could response the same uuid, and config table is not required.
     * </pre>
     *
     * <code>string uuid = 2;</code>
     * @param value The bytes for uuid to set.
     * @return This builder for chaining.
     */
    public Builder setUuidBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      uuid_ = value;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:ConfigurationResponse)
  }

  // @@protoc_insertion_point(class_scope:ConfigurationResponse)
  private static final ConfigurationResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ConfigurationResponse();
  }

  public static ConfigurationResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConfigurationResponse>
      PARSER = new com.google.protobuf.AbstractParser<ConfigurationResponse>() {
    @Override
    public ConfigurationResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ConfigurationResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ConfigurationResponse> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<ConfigurationResponse> getParserForType() {
    return PARSER;
  }

  @Override
  public ConfigurationResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

